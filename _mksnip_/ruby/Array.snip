---class-method---
# new(array)
new(size) { |i| block }
# try_convert(obj)
---instance-method---
assoc(obj)
at(index)
# bsearch { |x| block }
# clear
# collect { |e| block }
# collect
collect! { |e| block }
collect!
combination(n) { |c| block }
combination(n)
compact
compact!
concat
# count
# count(obj)
# count { |e| block }
# drop(n)
# drop_while { |ary| block }
# drop_while
delete(obj)
delete(obj) { block }
delete_at(index)
each { |e| block }
# each
each_index { |i| block }
# each_index
empty?
fetch(index)
fetch(index, default)
fetch(index) { |i| block }
fill(obj)
fill(obj, start)
fill(obj, start, length)
fill(obj, range)
fill { |i| block }
fill(start) { |i| block }
fill(start, length) { |i| block }
# find_index(obj)
# find_index { |e| block }
# find_index
# first
# first(n)
flatten
flatten(level)
flatten!
flatten!(level)
frozen?
hash
# include?(obj)
index(obj)
index { |e| block }
# index
insert(index, obj)
# inspect
join(separator)
keep_if { |e| block }
# keep_if
last
last(n)
length
# map { |e| block }
# map
map! { |e| block }
# map!
pack(aTemplateString)
permutation { |p| block }
# permutation
permutation(n) { |p| block }
# permutation(n)
pop
pop(n)
product(other_ary)
product(other_ary) { |p| block }
push
rassoc(obj)
# reject { |e| block }
reject! { |e| block }
repeated_combination(n) { |c| block }
# repeated_combination(n)
repeated_permutation(n) { |p| block }
# repeated_permutation(n)
replace(other_ary)
reverse
reverse!
reverse_each { |e| block }
# reverse_each
rindex(obj)
rindex { |e| block }
# rindex
rotate(count)
rotate!(count)
sample
# sample(random: rng)
sample(n)
# sample(n, random: rng)
# select { |e| block }
select! { |e| block }
shift
shift(n)
shuffle
# shuffle(random: rng)
shuffle!
# shuffle!(random: rng)
size
# slice(index)
# slice(start, length)
# slice(range)
# slice!(index)
# slice!(start, length)
# slice!(range)
# sort
# sort { |a, b| block } 
sort!
sort! { |a, b| block }
# sort_by { |obj| block }
# sort_by
sort_by! { |obj| block }
# sort_by!
# take(n)
# take_while { |ary| block }
# take_while
transpose
uniq
uniq { |item| block }
uniq!
uniq! { |item| block }
unshift(obj)
# values_at(selector)
# zip(args)
# zip(args) { |ary| block }
---EOF---