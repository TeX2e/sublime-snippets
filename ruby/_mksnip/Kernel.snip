---instance-method--
# Array(args)
# Complex(x, iy)
Complex(str)
# Float(arg)
# Hash(arg)
# Integer(arg, base)
Rational(x, y)
# String(arg)
# __callee__
__dir__
# __method__
abort
at_exit { block }
autoload(module_sym, filename)
autoload?(name)
binding
block_given?
callcc { |cont| block }
caller
caller_locations
catch { |tag| block }
eval(str)
exec(command_str)
exit
# fail
# fail(str)
fail(exception, str)
fork { block }
format(format_str, args)
gets
gets(seperator)
global_variables
# gsub(pattern, replace)
# gsub(pattern) { |item| block }
# iterator?
lambda { |args| block }
load(file_name, wrap=false)
local_variables
loop { block }
open(path, mode) { |io| block }
!p(obj)
!print(obj)
printf(format, args)
proc { |args| block }
putc(int)
!puts(obj)
# raise
# raise(str)
raise(exception, str)
rand
rand(max)
readline
readline(seperator)
!require(filename)
require_relative(filename)
set_trace_func(proc)
sleep(duration)
spawn(command_str)
sprintf(format_str, args)
srand(seed)
syscall(num, args)
system(command_str)
test(cmd, files)
throw(tag)
throw(tag, args)
trace_var(global_var_sym, cmd)
trace_var(global_var_sym) { |val| block }
trap(signal, command_str)
trap(signal) { block }
untrace_var(global_var_sym)
warn(message)
---EOF---






